
<%
##
# this file [chainmail.scad.erb] generates [chainmail.scad]
# run `erb chainmail.scad.erb > chainmail.scad`
#
# see also: http://paulbourke.net/geometry/chainmail3d/
%>

////
// Copyright (c) 2015, Andrew Monks
//
// Permission to use, copy, modify, and/or distribute this software for any purpose
// with or without fee is hereby granted, provided that the above copyright notice
// and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
// OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
// THIS SOFTWARE.

// this file [chainmail.scad] is generated from [chainmail.scad.erb]. Don't edit it directly.

<%
def ring(color, position, rotation, size, thickness, resolution = 32)
  out = ""
  out += "color(\"#{color}\")" + "\n"
  out += "translate(#{position})" + "\n"
  out += "rotate(#{rotation})" + "\n"
  out += "rotate_extrude($fn=#{resolution})" + "\n"
  out += "translate([#{size * 0.4}, 0, 0])" + "\n"
  out += "circle(#{thickness / 2.0}, $fn=16);" + "\n\n"
  out
end

def makeTile(position, size, thickness)
  spacing = size * 1.1
  out = ""

  # blue

  out += ring("blue", position.map{|x| x * spacing}, "", 1, thickness)
  offset = [spacing, spacing, spacing]
  out += ring("blue", position.map.with_index{|x, i| x * spacing + offset[i] / 2.0}, "", 1, thickness)

  # red

  offset = [0, spacing / 2.0, 0]
  out += ring("red", position.map.with_index{|x, i| x * spacing + offset[i]}, [0, 90, 0], 1, thickness)

  offset = [spacing / 2.0, 0, spacing / 2.0]
  out += ring("red", position.map.with_index{|x, i| x * spacing + offset[i]}, [0, 90, 0], 1, thickness)

  # green

  offset = [spacing / 2.0, 0, 0]
  out += ring("green", position.map.with_index{|x, i| x * spacing + offset[i]}, [90, 0, 0], 1, thickness)

  offset = [0, spacing / 2.0, spacing / 2.0]
  out += ring("green", position.map.with_index{|x, i| x * spacing + offset[i]}, [90, 0, 0], 1, thickness)

  out
end

def chainmail(size, ringSize, thickness)
  width = size[0]
  height = size[1]
  depth = size[2]
  out = ""

  (1..width).each do |x|
    (1..height).each do |y|
      (1..depth).each do |z|
        out += makeTile([x, y, z], ringSize, thickness)
      end
    end
  end
  out
end
%>

union() {
<%= chainmail([2, 2, 2], 1.0, 0.2) %>
}
